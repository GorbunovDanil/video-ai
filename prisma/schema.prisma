generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanTier {
  STARTER
  PRO
}

enum CreditTransactionType {
  DEBIT
  CREDIT
}

enum UsageEventType {
  RENDER_REQUESTED
  RENDER_COMPLETED
  RENDER_FAILED
  PROMPT_FILTERED
  CREDIT_RESERVED
  CREDIT_CAPTURED
  CREDIT_RELEASED
  CREDIT_REFUNDED
  CREDIT_PURCHASED
}

enum RenderType {
  IMAGE
  VIDEO_PREVIEW
  VIDEO_FINAL
}

enum RenderStatus {
  QUEUED
  PROCESSING
  SUCCEEDED
  FAILED
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String?
  image      String?
  emailVerified DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projects   Project[]
  brandKits  BrandKit[]
  accounts   Account[]
  sessions   Session[]
  credits    Float     @default(50)
  plan       PlanTier  @default(STARTER)
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?
  creditTransactions   CreditTransaction[]
  usageLogs            UsageLog[]
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  renders     Render[]
  brandKit    BrandKit?
}

model BrandKit {
  id                String    @id @default(cuid())
  project           Project?  @relation(fields: [projectId], references: [id])
  projectId         String?   @unique
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  primaryColor      String?
  secondaryColor    String?
  accentColor       String?
  logoUrl           String?
  watermarkEnabled  Boolean   @default(true)
  typography        Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Render {
  id             String       @id @default(cuid())
  project        Project      @relation(fields: [projectId], references: [id])
  projectId      String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  type           RenderType
  status         RenderStatus @default(QUEUED)
  providerJobId  String?
  prompt         String
  instructions   Json?
  brandSettings  Json?
  inputAssets    Json?
  outputAssetUrl String?
  watermarkUrl   String?
  costInCredits  Float?
  usageMetadata  Json?
  error          String?
  reservedCredits Float       @default(0)
  creditsDeducted Boolean     @default(false)
  creditTransactions CreditTransaction[]
  usageLogs      UsageLog[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model CreditTransaction {
  id        String                 @id @default(cuid())
  user      User                   @relation(fields: [userId], references: [id])
  userId    String
  amount    Float
  type      CreditTransactionType
  reason    String
  render    Render?                @relation(fields: [renderId], references: [id])
  renderId  String?
  metadata  Json?
  createdAt DateTime               @default(now())
}

model UsageLog {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  type      UsageEventType
  render    Render?        @relation(fields: [renderId], references: [id])
  renderId  String?
  metadata  Json?
  createdAt DateTime       @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
